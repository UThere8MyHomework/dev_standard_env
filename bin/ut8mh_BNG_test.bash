#!/usr/bin/env bash
#
# Copyright 2012 UThere8MyHomework
#
# FILE:  ${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/bin/ut8mh_BNG_test.bash
#
# This script tests implementation of the build-number-generator (BNG) script at
# ${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/bin/ut8mh_generate_unique_build_number.bash
#
#


# -- some settings

master_git_repo="git@github.com:UThere8MyHomework/_build_number_gen_test.git";
git_repo_dir="${HOME}/_ut8mh BNG_test_dir";
git_repo_parallel_dir="${HOME}/_ut8mh BNG_test_dir__parallel";

unset GITHUB_UT8MH_DEV__TMP__CUR_BUILD_NUMBER
unset GITHUB_UT8MH_DEV__TMP__CUR_BUILD_UUID


# -- prepare environment

if [ "X${GITHUB_UT8MH_DEV_STANDARD_ENV_HAS_BEEN_PREPARED}" != "X1" ]; then
    echo "== ERROR:  the http://github.com/UThere8MyHomework dev env hasn't been prepared ==";
    exit 1;
fi

if [ "X${HOME}" = "X" ]; then
    echo "== ERROR:  \${HOME} is not defined ==";
    exit 1;
fi
home2=`echo "${HOME}" | sed -e 's/[^\/A-Za-z0-9_]//g'`;
if [ "X${home2}" != "X${HOME}" ]; then
    echo "== ERROR:  \${HOME} (\"${HOME}\") contains unexpected characters ==";
    exit 1;
fi
cd "${HOME}";
if [ "X${?}" != "X0" ]; then
    echo "== ERROR:  could not make \${HOME} (\"${HOME}\") the current directory ==";
    exit 1;
fi
#echo "current dir \"${PWD}\"";

function delete_git_repo_dir()
{
    rm --recursive --force "${git_repo_dir}";
    #touch "${git_repo_dir}";
    if [ -e "${git_repo_dir}" ]; then
        echo "== ERROR:  could not delete \"${git_repo_dir}\" ==";
        exit 1;
    fi
}
function create_git_repo_dir()
{
    mkdir --parents "${git_repo_dir}";
    #rmdir "${git_repo_dir}";
    if [ ! -e "${git_repo_dir}" ]; then
        echo "== ERROR:  could not create \"${git_repo_dir}\" ==";
        exit 1;
    fi
}
function delete_git_repo_parallel_dir()
{
    rm --recursive --force "${git_repo_parallel_dir}";
    #touch "${git_repo_parallel_dir}";
    if [ -e "${git_repo_parallel_dir}" ]; then
        echo "== ERROR:  could not delete \"${git_repo_parallel_dir}\" ==";
        exit 1;
    fi
}
function create_git_repo_parallel_dir()
{
    mkdir --parents "${git_repo_parallel_dir}";
    #rmdir "${git_repo_parallel_dir}";
    if [ ! -e "${git_repo_parallel_dir}" ]; then
        echo "== ERROR:  could not create \"${git_repo_parallel_dir}\" ==";
        exit 1;
    fi
}

delete_git_repo_dir;
create_git_repo_dir;
found_error=`cd "${git_repo_dir}" && (git status 2>&1 | sed --expression 's/^.*fatal: Not a git repository.*/_NOT_A_GIT_REPOSITORY_/')`;
if [ "X${found_error}" != "X_NOT_A_GIT_REPOSITORY_" ]; then
    echo "== ERROR:  it appears at least one ancestor directory for \"${git_repo_dir}\" is a git repository ==";
    exit 1;
fi
delete_git_repo_dir;
delete_git_repo_parallel_dir;
if [ -e "${git_repo_parallel_dir}" ]; then
    echo "== ERROR:  acould not get rid of parallel git directory \"${git_repo_parallel_dir}\"";
    exit 1;
fi


# -- prepare output file

mkdir --parents "${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp";
if [ ! -d "${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp" ]; then
    echo "== ERROR:  could not create temporary directory for test output file \${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp ==";
    exit 1;
fi

test_output_file="${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp/test_output__ut8mh_BNG_test.txt";
test_output_file_filtered="${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp/test_output__ut8mh_BNG_test__FILTERED.txt";
rm --force "${test_output_file}";
#touch "${test_output_file}";
if [ -e "${test_output_file}" ]; then
    echo "== ERROR:  could not delete pre-existing test output file \"${test_output_file}\" ==";
    exit 1;
fi


# -- prepare test output

function gen_header()
{
    msg="${1}";

    # Replace ${HOME} with special text
    if [[ ${msg} = *${HOME}* ]]; then
        msg="${msg%%${HOME}*}__HOME_DIR__${msg##*${HOME}}";
    fi

    # hmmm ... does not work ... Replace "/Users/egdev" (hardcoded for specific OSX environment) with special text
    #HOME2="/Users/egdev";
    #if [[ ${msg} = *${HOME2}* ]]; then
    #    msg="${msg%%${HOME2}*}__HOME_DIR__${msg##*${HOME2}}";
    #fi

    sep=`echo "${msg}" | sed -e 's/./#/g'`;
    sep="#######${sep}#######";
    sep2=`echo "${msg}" | sed -e 's/./ /g'`;
    sep2="#####  ${sep2}  #####";
    echo >> "${test_output_file}";
    echo >> "${test_output_file}";
    echo "${sep}" >> "${test_output_file}";
    echo "${sep}" >> "${test_output_file}";
    echo "${sep2}" >> "${test_output_file}";
    echo "#####  ${msg}  #####" >> "${test_output_file}";
    echo "${sep2}" >> "${test_output_file}";
    echo "${sep}" >> "${test_output_file}";
    echo "${sep}" >> "${test_output_file}";
    echo >> "${test_output_file}";
    echo >> "${test_output_file}";
}
gen_header "== Copyright 2012 UThere8MyHomework ==";
gen_header "== This test output file is autogenerated from scripts 'ut8mh_generate_unique_build_number.bash' and 'ut8mh_BNG_test.bash' ==";
gen_header "== BEGIN TESTS for script \${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/bin/ut8mh_generate_unique_build_number.bash ==";

function echo_ut8mh_generate_unique_build_number_bash_status()
{
    status=${?};
    if [ "X${status}" = "X0" ]; then
        status="ok";
    else
        status="*** ERROR:  ${status} ***";
    fi
    echo >> "${test_output_file}";
    echo "        @@@@ ut8mh_generate_unique_build_number.bash status:  ${status}  @@@@" >> "${test_output_file}";
}

function abort_test_underway()
{
    gen_header "== ERROR:  !!! could not complete test, ERROR transient (hopefully) issue in testing code !!! ==";
    exit 9;
}


# -- pretend that environment has not yet been prepared for dev purposes

gen_header "pretend that environment has not been prepared with \"source .../bin/_ut8mh_source_to_prep_env.bash\"";
env \
    GITHUB_UT8MH_DEV_STANDARD_ENV_HAS_BEEN_PREPARED="" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- check reaction to 'bad' environment variables being set

gen_header "deal with env var 'GITHUB_UT8MH_DEV__TMP__CUR_BUILD_NUMBER' already being set"
env \
    GITHUB_UT8MH_DEV__TMP__CUR_BUILD_NUMBER="some_non_empty_value" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "deal with env var 'GITHUB_UT8MH_DEV__TMP__CUR_BUILD_UUID' already being set"
env \
    GITHUB_UT8MH_DEV__TMP__CUR_BUILD_UUID="some_non_empty_value" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- initialize version-generating github repository to have some old date

function set_parallel_proposed_cur_build_number()
{
    num="${1}";
    msg="${2}";

    (cd "${git_repo_parallel_dir}" && git reset --hard HEAD) >/dev/null 2>&1;
    (cd "${git_repo_parallel_dir}" && git pull) >/dev/null 2>&1;
    echo "${num}" > "${git_repo_parallel_dir}/proposed_cur_build_number.txt";
    date --utc > "${git_repo_parallel_dir}/proposed_cur_build_uuid.txt";        # don't care, not a real UUID, just need something that changes
    (cd "${git_repo_parallel_dir}" && git add ./proposed_cur_build_number.txt) >/dev/null;
    (cd "${git_repo_parallel_dir}" && git commit -m "${msg}") >/dev/null;
    (cd "${git_repo_parallel_dir}" && git push) >/dev/null 2>/dev/null;
    status=${?};
    if [ "X${status}" != "X0" ]; then
        echo "== ERROR:  could not push testing changes to \"${master_git_repo}\" ==";
        abort_test_underway;
    fi

    #echo "current dir \"${PWD}\"";
}

gen_header "creating 'prior' version of the build-number-gen repository with 'old' date in it"
# DO_NOT:  #create_git_repo_parallel_dir;
git clone "${master_git_repo}" "${git_repo_parallel_dir}" >/dev/null 2>&1;
status=${?};
if [ "X${status}" != "X0" ] || [ ! -d "${git_repo_parallel_dir}/.git" ]; then
    echo "== ERROR:  could not clone \"${master_git_repo}\" into \"${git_repo_parallel_dir}\", status ${status} ==";
    abort_test_underway;
fi
set_parallel_proposed_cur_build_number "120107153" "initial test state";


# -- check for specified git repo directory weirdnesses (things done up front, before any iteration attempts)

create_git_repo_dir;

gen_header "check handling of local directory that will host git repository copy, git_repo_dir=\"${git_repo_dir}\" (part 1)";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}///////" \
    test_switch__quit_after_verifying_git_repo_dir="1" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "check handling of local directory that will host git repository copy, git_repo_dir=\"${git_repo_dir}\" (part 2)";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="/////////_///////_ut8mh BNG_test_dir//////" \
    test_switch__quit_after_verifying_git_repo_dir="1" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "check handling of local directory that will host git repository copy, git_repo_dir=\"${git_repo_dir}\" (part 3)";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="////////////////_ut8mh BNG_test_dir//////" \
    test_switch__quit_after_verifying_git_repo_dir="1" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "check for failure to switch directory to local git repository copy, git_repo_dir=\"${git_repo_dir}\"";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__force_fail_switch_to_git_repo_dir="_FORCE_FAIL" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- ... from now on, tests happen during an "attempted iteration" ...


# -- make sure we can remove any pre-existing ./_tmp_cur_build_info.bash_src

touch "${git_repo_dir}/_tmp_cur_build_info.bash_src";
gen_header "make sure we can handle failure to remove pre-existing ./_tmp_cur_build_info.bash_src"
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__force_fail_delete_tmp_cur_build_info_bash_src="_FORCE_FAIL" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- make sure we can remove any pre-existing ./cur_build_uuid.txt

touch "${git_repo_dir}/cur_build_uuid.txt";
gen_header "make sure we can handle failure to remove pre-existing ./cur_build_uuid.txt"
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__force_fail_delete_cur_build_uuid_txt="_FORCE_FAIL" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- make sure we can deal with not-having-a-valid-git-repo

gen_header "make sure we can handle recognizing the git repo isn't copied locally yet";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "make sure we can handle recognizing the git repo isn't valid";
git clone "${master_git_repo}" "${git_repo_dir}" >/dev/null 2>&1;
status=${?};
if [ "X${status}" != "X0" ] || [ ! -d "${git_repo_dir}/.git" ]; then
    echo "== ERROR:  could not clone \"${master_git_repo}\" into \"${git_repo_dir}\", status ${status} ==";
    abort_test_underway;
fi
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__rename_dot_git_dir_1="_YES_RENAME" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;
mv "${git_repo_dir}/.git2" "${git_repo_dir}/.git";


# -- make sure we can deal with local-git-repo-has-uncommitted-changes

gen_header "make sure we can handle failing to determine whether the git repo has uncommitted changes";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__fail_wc_1="_YES_FAIL_wc_1" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "make sure we can handle a git repo that has uncommitted changes";
touch "${git_repo_dir}/_extra_file";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;
rm --force "${git_repo_dir}/_extra_file";


# -- update "parallel" repository so when we pull in our test repo we'll actually pull something down

set_parallel_proposed_cur_build_number "120107157" "a valid 'offline' change";


# -- make sure we can pull changes

gen_header "make sure we can deal with failing to pull central changes into our local git repo (part 1)";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__fail_git_1="_YES_FAIL_git_1" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

gen_header "make sure we can deal with failing to pull central changes into our local git repo (part 2)";
echo "120107158" > "${git_repo_dir}/proposed_cur_build_number.txt";
(cd "${git_repo_dir}" && git add ./proposed_cur_build_number.txt) >/dev/null;
(cd "${git_repo_dir}" && git commit -m "a conflicting change with one done 'offline'") >/dev/null;
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

delete_git_repo_dir;
git clone "${master_git_repo}" "${git_repo_dir}" >/dev/null 2>&1;
status=${?};
if [ "X${status}" != "X0" ] || [ ! -d "${git_repo_dir}/.git" ]; then
    echo "== ERROR:  could not clone \"${master_git_repo}\" into \"${git_repo_dir}\", status ${status} ==";
    abort_test_underway;
fi
set_parallel_proposed_cur_build_number "9999999999999999999999999" "an invalid state";

gen_header "make sure we can pull central changes into our local git repo";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__quit_after_pulling_central_changes=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with invalid content

    # note the 'invalid content' comment above
gen_header "make sure we can deal with weirdness in central repository's content";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

    # make content valid again
set_parallel_proposed_cur_build_number "120107999" "bringing 'offline' change back to valid state, but about to overflow for date";


# -- deal with failing to get today's proper date

gen_header "deal with failing to get today's proper date"
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__fail_date_1="_YES_FAIL_date_1" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with date overflow (more than 999 version numbers in a single day)

gen_header "deal with more than 999 version numbers in a single day";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with same-day version number increments

set_parallel_proposed_cur_build_number "120107008" "bringing 'offline' change back to valid state, next increment to be under '10'";
gen_header "make sure incrementing same-day version to under-10 works";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__quit_after_computing_next_build_number=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

set_parallel_proposed_cur_build_number "120107009" "bringing 'offline' change back to valid state, next increment to be under '100' but '10' or over";
gen_header "make sure incrementing same-day version to under-100 works";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__quit_after_computing_next_build_number=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

set_parallel_proposed_cur_build_number "120107099" "bringing 'offline' change back to valid state, next increment to be '100' or over";
gen_header "make sure incrementing same-day version to 100-or-over works";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__quit_after_computing_next_build_number=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with versioning going back in time to prior day

gen_header "make sure detecting going backwards in time works"
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120106" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with versioning going forward to subsequent days

gen_header "make sure going forward to next-day version works";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120108" \
    test_switch__quit_after_computing_next_build_number=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with failing to write proposed new cur build number

gen_header "deal with failing to write proposed new current build number";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__force_fail_write_proposed_cur_build_number_txt=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with failing to generate a new build uuid

(cd "${git_repo_dir}" && (git reset --hard HEAD >/dev/null));
gen_header "deal with failing to generate a new build uuid";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__force_fail_generate_uuid=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with failing to write proposed new build uuid

(cd "${git_repo_dir}" && (git reset --hard HEAD >/dev/null));
gen_header "deal with failing to write proposed new build uuid";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__force_fail_write_proposed_cur_build_uuid=1 \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with failing to commit locally the build number

(cd "${git_repo_dir}" && (git reset --hard HEAD >/dev/null));
gen_header "deal with failing to commit locally the new current build number [1]";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__fail_git_2="_YES_FAIL_GIT_2" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;

(cd "${git_repo_dir}" && (git reset --hard HEAD >/dev/null));
gen_header "deal with failing to commit locally the new current build number [2]";
env \
    master_git_repo="${master_git_repo}" \
    git_repo_dir="${git_repo_dir}" \
    test_switch__substitute_date="120107" \
    test_switch__fail_git_3="_YES_FAIL_GIT_3" \
    test_switch__quit_even_if_not_permanent_failure="_YES_QUIT" \
    ut8mh_generate_unique_build_number.bash >> "${test_output_file}" 2>&1;
echo_ut8mh_generate_unique_build_number_bash_status;


# -- deal with failing to push results because some other "client" wanting a build
#    number gets there first ('push' should fail on conflicting uuid)

ii=1
while [ ${ii} -le 6 ]; do

    if [ ${ii} -eq 1 ]; then
        test_switch__force_fail_delete_prior_partial_results="_YES_FAIL_DELETE_PRIOR_PARTIAL_RESULTS";
        test_switch__force_fail_restore_git_repo_to_central_state_1="";
        test_switch__force_fail_restore_git_repo_to_central_state_2="";
        test_switch__force_fail_restore_git_repo_to_central_state_3="";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="";
        header="deal with losing race to push generated build number to central repository (and fail-to-erase on next iteration)";
    fi
    if [ ${ii} -eq 2 ]; then
        test_switch__force_fail_delete_prior_partial_results="";
        test_switch__force_fail_restore_git_repo_to_central_state_1="_YES_FAIL_RESTORE_TO_CENTRAL_1";
        test_switch__force_fail_restore_git_repo_to_central_state_2="";
        test_switch__force_fail_restore_git_repo_to_central_state_3="";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="";
        header="deal with losing race to push generated build number to central repository (and fail-to-restore on next iteration [1])";
    fi
    if [ ${ii} -eq 3 ]; then
        test_switch__force_fail_delete_prior_partial_results="";
        test_switch__force_fail_restore_git_repo_to_central_state_1="";
        test_switch__force_fail_restore_git_repo_to_central_state_2="_YES_FAIL_RESTORE_TO_CENTRAL_2";
        test_switch__force_fail_restore_git_repo_to_central_state_3="";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="";
        header="deal with losing race to push generated build number to central repository (and fail-to-restore on next iteration [2])";
    fi
    if [ ${ii} -eq 4 ]; then
        test_switch__force_fail_delete_prior_partial_results="";
        test_switch__force_fail_restore_git_repo_to_central_state_1="";
        test_switch__force_fail_restore_git_repo_to_central_state_2="";
        test_switch__force_fail_restore_git_repo_to_central_state_3="_YES_FAIL_RESTORE_TO_CENTRAL_3";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="";
        header="deal with losing race to push generated build number to central repository (and fail-to-restore on next iteration [3])";
    fi
    if [ ${ii} -eq 5 ]; then
        test_switch__force_fail_delete_prior_partial_results="";
        test_switch__force_fail_restore_git_repo_to_central_state_1="";
        test_switch__force_fail_restore_git_repo_to_central_state_2="";
        test_switch__force_fail_restore_git_repo_to_central_state_3="";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="_YES_FAIL_WRITE_BUILD_INFO";
        header="deal with failing to write build info to bash-source-able file";
    fi
    if [ ${ii} -eq 6 ]; then
        test_switch__force_fail_delete_prior_partial_results="";
        test_switch__force_fail_restore_git_repo_to_central_state_1="";
        test_switch__force_fail_restore_git_repo_to_central_state_2="";
        test_switch__force_fail_restore_git_repo_to_central_state_3="";
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="";
        header="succeed";
    fi

    delete_git_repo_dir;
    git clone "${master_git_repo}" "${git_repo_dir}" >/dev/null 2>&1;
    delete_git_repo_parallel_dir;
    git clone "${master_git_repo}" "${git_repo_parallel_dir}" >/dev/null 2>&1;

    gen_header "${header}"
    echo "    *** starting successful (forked) build-number-generating client ***" >> "${test_output_file}";
    echo >> "${test_output_file}";
    test_output_file_stem="${GITHUB_UT8MH_DEV_STANDARD_ENV_HOME}/tmp/_test_output_parallel__ut8mh_BNG_test_";
    (env \
        master_git_repo="${master_git_repo}" \
        git_repo_dir="${git_repo_parallel_dir}" \
        test_switch__substitute_date="120107" \
        sleep_before_push=5 \
        ut8mh_generate_unique_build_number.bash > "${test_output_file_stem}${ii}.txt") 2>&1 & succeeding_build_number_generator_pid=$!;
    echo "    *** starting initially failed but ultimately successful build-number-generating client ***" >> "${test_output_file}";
    echo >> "${test_output_file}";
    touch "${git_repo_dir}/delay_push_while_this_file_exists.txt";
    (env \
        master_git_repo="${master_git_repo}" \
        git_repo_dir="${git_repo_dir}" \
        test_switch__substitute_date="120107" \
        test_switch__force_fail_delete_prior_partial_results="${test_switch__force_fail_delete_prior_partial_results}" \
        test_switch__force_fail_restore_git_repo_to_central_state_1="${test_switch__force_fail_restore_git_repo_to_central_state_1}" \
        test_switch__force_fail_restore_git_repo_to_central_state_2="${test_switch__force_fail_restore_git_repo_to_central_state_2}" \
        test_switch__force_fail_write_tmp_cur_build_info_bash_src="${test_switch__force_fail_write_tmp_cur_build_info_bash_src}" \
        test_switch__force_fail_restore_git_repo_to_central_state_3="${test_switch__force_fail_restore_git_repo_to_central_state_3}" \
        ut8mh_generate_unique_build_number.bash >> "${test_output_file}") 2>&1 & failing_build_number_generator_pid=$!;
    wait ${succeeding_build_number_generator_pid};
    rm --force "${git_repo_dir}/delay_push_while_this_file_exists.txt";
    wait ${failing_build_number_generator_pid};
    echo_ut8mh_generate_unique_build_number_bash_status;

    let ii=${ii}+1;

done


# --

gen_header "== END TESTS ==";


# --  filter the test output file

substitute_homedir_1=`echo ${HOME} | sed -e 's/\//./g'`;
substitute_homedir_2="s/${substitute_homedir_1}/__HOME_DIR__/g";
(   cat "${test_output_file}" | \
    sed \
        --expression 's/[0-9a-f][0-9a-f]*\.\.[0-9a-f][0-9a-f]*/xxxxxxx\.\.yyyyyyy/' \
        --expression ${substitute_homedir_2} \
        --expression 's/1 file changed, 1 insertion..., 1 deletion.../1 files changed, 1 insertions(+), 1 deletions(-)/'\
    ) \
    > "${test_output_file_filtered}"


# -- done with tests

exit 0;


# --- END OF FILE.
